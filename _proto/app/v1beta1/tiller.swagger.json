{
  "basePath": "/",
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "HookEvent": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "PRE_INSTALL",
        "POST_INSTALL",
        "PRE_DELETE",
        "POST_DELETE",
        "PRE_UPGRADE",
        "POST_UPGRADE",
        "PRE_ROLLBACK",
        "POST_ROLLBACK",
        "RELEASE_TEST_SUCCESS",
        "RELEASE_TEST_FAILURE"
      ],
      "type": "string"
    },
    "ListSortSortBy": {
      "default": "UNKNOWN",
      "description": "SortBy defines sort operations.",
      "enum": [
        "UNKNOWN",
        "NAME",
        "LAST_RELEASED"
      ],
      "type": "string"
    },
    "ListSortSortOrder": {
      "default": "ASC",
      "description": "SortOrder defines sort orders to augment sorting operations.",
      "enum": [
        "ASC",
        "DESC"
      ],
      "type": "string"
    },
    "StatusCode": {
      "default": "UNKNOWN",
      "description": " - UNKNOWN: Status_UNKNOWN indicates that a release is in an uncertain state.\n - DEPLOYED: Status_DEPLOYED indicates that the release has been pushed to Kubernetes.\n - DELETED: Status_DELETED indicates that a release has been deleted from Kubermetes.\n - SUPERSEDED: Status_SUPERSEDED indicates that this release object is outdated and a newer one exists.\n - FAILED: Status_FAILED indicates that the release was not successfully deployed.\n - DELETING: Status_DELETING indicates that a delete operation is underway.",
      "enum": [
        "UNKNOWN",
        "DEPLOYED",
        "DELETED",
        "SUPERSEDED",
        "FAILED",
        "DELETING"
      ],
      "type": "string"
    },
    "chartChart": {
      "description": "Chart is a helm package that contains metadata, a default config, zero or more\n\toptionally parameterizable templates, and zero or more charts (dependencies).",
      "properties": {
        "dependencies": {
          "description": "Charts that this chart depends on.",
          "items": {
            "$ref": "#/definitions/chartChart"
          },
          "type": "array"
        },
        "files": {
          "description": "Miscellaneous files in a chart archive,\ne.g. README, LICENSE, etc.",
          "items": {
            "$ref": "#/definitions/hapichartAny"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/chartMetadata",
          "description": "Contents of the Chartfile."
        },
        "templates": {
          "description": "Templates for this chart.",
          "items": {
            "$ref": "#/definitions/chartTemplate"
          },
          "type": "array"
        },
        "values": {
          "$ref": "#/definitions/chartConfig",
          "description": "Default config for this template."
        }
      },
      "type": "object"
    },
    "chartConfig": {
      "description": "Config supplies values to the parametrizable templates of a chart.",
      "properties": {
        "raw": {
          "type": "string"
        },
        "values": {
          "additionalProperties": {
            "$ref": "#/definitions/chartValue"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "chartMaintainer": {
      "description": "Maintainer describes a Chart maintainer.",
      "properties": {
        "email": {
          "title": "Email is an optional email address to contact the named maintainer",
          "type": "string"
        },
        "name": {
          "title": "Name is a user name or organization name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "chartMetadata": {
      "description": "Metadata for a Chart file. This models the structure of a Chart.yaml file.\n\n\tSpec: https://k8s.io/helm/blob/master/docs/design/chart_format.md#the-chart-file",
      "properties": {
        "apiVersion": {
          "description": "The API Version of this chart.",
          "type": "string"
        },
        "appVersion": {
          "description": "The version of the application enclosed inside of this chart.",
          "type": "string"
        },
        "condition": {
          "title": "The condition to check to enable chart",
          "type": "string"
        },
        "deprecated": {
          "format": "boolean",
          "title": "Whether or not this chart is deprecated",
          "type": "boolean"
        },
        "description": {
          "title": "A one-sentence description of the chart",
          "type": "string"
        },
        "engine": {
          "description": "The name of the template engine to use. Defaults to 'gotpl'.",
          "type": "string"
        },
        "home": {
          "title": "The URL to a relevant project page, git repo, or contact person",
          "type": "string"
        },
        "icon": {
          "description": "The URL to an icon file.",
          "type": "string"
        },
        "keywords": {
          "items": {
            "type": "string"
          },
          "title": "A list of string keywords",
          "type": "array"
        },
        "maintainers": {
          "items": {
            "$ref": "#/definitions/chartMaintainer"
          },
          "title": "A list of name and URL/email address combinations for the maintainer(s)",
          "type": "array"
        },
        "name": {
          "title": "The name of the chart",
          "type": "string"
        },
        "sources": {
          "items": {
            "type": "string"
          },
          "title": "Source is the URL to the source code of this chart",
          "type": "array"
        },
        "tags": {
          "title": "The tags to check to enable chart",
          "type": "string"
        },
        "version": {
          "title": "A SemVer 2 conformant version string of the chart",
          "type": "string"
        }
      },
      "type": "object"
    },
    "chartTemplate": {
      "description": "Template represents a template as a name/value pair.\n\nBy convention, name is a relative path within the scope of the chart's\nbase directory.",
      "properties": {
        "data": {
          "description": "Data is the template as byte data.",
          "format": "byte",
          "type": "string"
        },
        "name": {
          "description": "Name is the path-like name of the template.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "chartValue": {
      "description": "Value describes a configuration value as a string.",
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "hapichartAny": {
      "properties": {
        "type_url": {
          "description": "A resource name whose content describes the type of the\nserialized data.",
          "type": "string"
        },
        "value": {
          "description": "Data for file.",
          "format": "byte",
          "type": "string"
        }
      },
      "title": "Copied from https://github.com/golang/protobuf/blob/master/ptypes/any/any.proto",
      "type": "object"
    },
    "hapireleaseStatus": {
      "description": "Status defines the status of a release.",
      "properties": {
        "code": {
          "$ref": "#/definitions/StatusCode"
        },
        "last_test_suite_run": {
          "$ref": "#/definitions/releaseTestSuite",
          "title": "LastTestSuiteRun provides results on the last test run on a release"
        },
        "notes": {
          "title": "Contains the rendered templates/NOTES.txt if available",
          "type": "string"
        },
        "resources": {
          "description": "Cluster resources as kubectl would print them.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "releaseHook": {
      "description": "Hook defines a hook object.",
      "properties": {
        "events": {
          "description": "Events are the events that this hook fires on.",
          "items": {
            "$ref": "#/definitions/HookEvent"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is the Kubernetes kind.",
          "type": "string"
        },
        "last_run": {
          "description": "LastRun indicates the date/time this was last run.",
          "format": "date-time",
          "type": "string"
        },
        "manifest": {
          "description": "Manifest is the manifest contents.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path is the chart-relative path to the template.",
          "type": "string"
        },
        "weight": {
          "format": "int32",
          "title": "Weight indicates the sort order for execution among similar Hook type",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "releaseInfo": {
      "description": "Info describes release information.",
      "properties": {
        "Description": {
          "description": "Description is human-friendly \"log entry\" about this release.",
          "type": "string"
        },
        "Username": {
          "description": "Username is the authenticated user who performed this release.",
          "type": "string"
        },
        "deleted": {
          "description": "Deleted tracks when this object was deleted.",
          "format": "date-time",
          "type": "string"
        },
        "first_deployed": {
          "format": "date-time",
          "type": "string"
        },
        "last_deployed": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/hapireleaseStatus"
        }
      },
      "type": "object"
    },
    "releaseRelease": {
      "description": "Release describes a deployment of a chart, together with the chart\nand the variables used to deploy that chart.",
      "properties": {
        "chart": {
          "$ref": "#/definitions/chartChart",
          "description": "Chart is the chart that was released."
        },
        "config": {
          "$ref": "#/definitions/chartConfig",
          "description": "Config is the set of extra Values added to the chart.\nThese values override the default values inside of the chart."
        },
        "hooks": {
          "description": "Hooks are all of the hooks declared for this release.",
          "items": {
            "$ref": "#/definitions/releaseHook"
          },
          "type": "array"
        },
        "info": {
          "$ref": "#/definitions/releaseInfo",
          "title": "Info provides information about a release"
        },
        "manifest": {
          "description": "Manifest is the string representation of the rendered template.",
          "type": "string"
        },
        "name": {
          "title": "Name is the name of the release",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the kubernetes namespace of the release.",
          "type": "string"
        },
        "version": {
          "description": "Version is an int32 which represents the version of the release.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "releaseTestRun": {
      "properties": {
        "completed_at": {
          "format": "date-time",
          "type": "string"
        },
        "info": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "started_at": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/releaseTestRunStatus"
        }
      },
      "type": "object"
    },
    "releaseTestRunStatus": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "SUCCESS",
        "FAILURE"
      ],
      "type": "string"
    },
    "releaseTestSuite": {
      "properties": {
        "completed_at": {
          "format": "date-time",
          "title": "CompletedAt indicates the date/time this test suite was completed",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/releaseTestRun"
          },
          "title": "Results are the results of each segment of the test",
          "type": "array"
        },
        "started_at": {
          "format": "date-time",
          "title": "StartedAt indicates the date/time this test suite was kicked off",
          "type": "string"
        }
      },
      "title": "TestSuite comprises of the last run of the pre-defined test suite of a release version",
      "type": "object"
    },
    "v1beta1GetHistoryRequest": {
      "description": "GetHistoryRequest requests a release's history.",
      "properties": {
        "max": {
          "description": "The maximum number of releases to include.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The name of the release.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1beta1GetHistoryResponse": {
      "description": "GetHistoryResponse is received in response to a GetHistory rpc.",
      "properties": {
        "releases": {
          "items": {
            "$ref": "#/definitions/releaseRelease"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1beta1GetReleaseContentRequest": {
      "description": "GetReleaseContentRequest is a request to get the contents of a release.",
      "properties": {
        "name": {
          "title": "The name of the release",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "title": "Version is the version of the release",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1beta1GetReleaseContentResponse": {
      "description": "GetReleaseContentResponse is a response containing the contents of a release.",
      "properties": {
        "release": {
          "$ref": "#/definitions/releaseRelease",
          "title": "The release content"
        }
      },
      "type": "object"
    },
    "v1beta1GetReleaseStatusRequest": {
      "description": "GetReleaseStatusRequest is a request to get the status of a release.",
      "properties": {
        "name": {
          "title": "Name is the name of the release",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "title": "Version is the version of the release",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1beta1GetReleaseStatusResponse": {
      "description": "GetReleaseStatusResponse is the response indicating the status of the named release.",
      "properties": {
        "info": {
          "$ref": "#/definitions/releaseInfo",
          "description": "Info contains information about the release."
        },
        "name": {
          "description": "Name is the name of the release.",
          "type": "string"
        },
        "namespace": {
          "title": "Namesapce the release was released into",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1beta1GetVersionRequest": {
      "description": "GetVersionRequest requests for version information.",
      "type": "object"
    },
    "v1beta1GetVersionResponse": {
      "properties": {
        "Version": {
          "$ref": "#/definitions/versionVersion"
        }
      },
      "type": "object"
    },
    "v1beta1InstallReleaseRequest": {
      "description": "InstallReleaseRequest is the request for an installation of a chart.",
      "properties": {
        "chart": {
          "$ref": "#/definitions/chartChart",
          "description": "Chart is the protobuf representation of a chart."
        },
        "disable_hooks": {
          "description": "DisableHooks causes the server to skip running any hooks for the install.",
          "format": "boolean",
          "type": "boolean"
        },
        "dry_run": {
          "description": "DryRun, if true, will run through the release logic, but neither create\na release object nor deploy to Kubernetes. The release object returned\nin the response will be fake.",
          "format": "boolean",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the candidate release name. This must be unique to the\nnamespace, otherwise the server will return an error. If it is not\nsupplied, the server will autogenerate one.",
          "type": "string"
        },
        "namespace": {
          "description": "Namepace is the kubernetes namespace of the release.",
          "type": "string"
        },
        "reuse_name": {
          "description": "ReuseName requests that Tiller re-uses a name, instead of erroring out.",
          "format": "boolean",
          "type": "boolean"
        },
        "timeout": {
          "description": "timeout specifies the max amount of time any kubernetes client command can run.",
          "format": "int64",
          "type": "integer"
        },
        "values": {
          "$ref": "#/definitions/chartConfig",
          "description": "Values is a string containing (unparsed) YAML values."
        },
        "wait": {
          "format": "boolean",
          "title": "wait, if true, will wait until all Pods, PVCs, and Services are in a ready state\nbefore marking the release as successful. It will wait for as long as timeout",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1beta1InstallReleaseResponse": {
      "description": "InstallReleaseResponse is the response from a release installation.",
      "properties": {
        "release": {
          "$ref": "#/definitions/releaseRelease"
        }
      },
      "type": "object"
    },
    "v1beta1ListReleasesRequest": {
      "description": "ListReleasesRequest requests a list of releases.\n\nReleases can be retrieved in chunks by setting limit and offset.\n\nReleases can be sorted according to a few pre-determined sort stategies.",
      "properties": {
        "filter": {
          "description": "Filter is a regular expression used to filter which releases should be listed.\n\nAnything that matches the regexp will be included in the results.",
          "type": "string"
        },
        "limit": {
          "description": "Limit is the maximum number of releases to be returned.",
          "format": "int64",
          "type": "integer"
        },
        "namespace": {
          "description": "Namespace is the filter to select releases only from a specific namespace.",
          "type": "string"
        },
        "offset": {
          "description": "Offset is the last release name that was seen. The next listing\noperation will start with the name after this one.\nExample: If list one returns albert, bernie, carl, and sets 'next: dennis'.\ndennis is the offset. Supplying 'dennis' for the next request should\ncause the next batch to return a set of results starting with 'dennis'.",
          "type": "string"
        },
        "sort_by": {
          "$ref": "#/definitions/ListSortSortBy",
          "description": "SortBy is the sort field that the ListReleases server should sort data before returning."
        },
        "sort_order": {
          "$ref": "#/definitions/ListSortSortOrder",
          "description": "SortOrder is the ordering directive used for sorting."
        },
        "status_codes": {
          "items": {
            "$ref": "#/definitions/StatusCode"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1beta1ListReleasesResponse": {
      "description": "ListReleasesResponse is a list of releases.",
      "properties": {
        "count": {
          "description": "Count is the expected total number of releases to be returned.",
          "format": "int64",
          "type": "integer"
        },
        "next": {
          "description": "Next is the name of the next release. If this is other than an empty\nstring, it means there are more results.",
          "type": "string"
        },
        "releases": {
          "description": "Releases is the list of found release objects.",
          "items": {
            "$ref": "#/definitions/releaseRelease"
          },
          "type": "array"
        },
        "total": {
          "description": "Total is the total number of queryable releases.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1beta1RollbackReleaseRequest": {
      "properties": {
        "disable_hooks": {
          "format": "boolean",
          "title": "DisableHooks causes the server to skip running any hooks for the rollback",
          "type": "boolean"
        },
        "dry_run": {
          "format": "boolean",
          "title": "dry_run, if true, will run through the release logic but no create",
          "type": "boolean"
        },
        "force": {
          "description": "Force resource update through delete/recreate if needed.",
          "format": "boolean",
          "type": "boolean"
        },
        "name": {
          "title": "The name of the release",
          "type": "string"
        },
        "recreate": {
          "format": "boolean",
          "title": "Performs pods restart for resources if applicable",
          "type": "boolean"
        },
        "timeout": {
          "description": "timeout specifies the max amount of time any kubernetes client command can run.",
          "format": "int64",
          "type": "integer"
        },
        "version": {
          "description": "Version is the version of the release to deploy.",
          "format": "int32",
          "type": "integer"
        },
        "wait": {
          "format": "boolean",
          "title": "wait, if true, will wait until all Pods, PVCs, and Services are in a ready state\nbefore marking the release as successful. It will wait for as long as timeout",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1beta1RollbackReleaseResponse": {
      "description": "RollbackReleaseResponse is the response to an update request.",
      "properties": {
        "release": {
          "$ref": "#/definitions/releaseRelease"
        }
      },
      "type": "object"
    },
    "v1beta1TestReleaseRequest": {
      "description": "TestReleaseRequest is a request to get the status of a release.",
      "properties": {
        "cleanup": {
          "format": "boolean",
          "title": "cleanup specifies whether or not to attempt pod deletion after test completes",
          "type": "boolean"
        },
        "name": {
          "title": "Name is the name of the release",
          "type": "string"
        },
        "timeout": {
          "description": "timeout specifies the max amount of time any kubernetes client command can run.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1beta1TestReleaseResponse": {
      "properties": {
        "msg": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/releaseTestRunStatus"
        }
      },
      "title": "TestReleaseResponse represents a message from executing a test",
      "type": "object"
    },
    "v1beta1UninstallReleaseRequest": {
      "description": "UninstallReleaseRequest represents a request to uninstall a named release.",
      "properties": {
        "disable_hooks": {
          "description": "DisableHooks causes the server to skip running any hooks for the uninstall.",
          "format": "boolean",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the name of the release to delete.",
          "type": "string"
        },
        "purge": {
          "description": "Purge removes the release from the store and make its name free for later use.",
          "format": "boolean",
          "type": "boolean"
        },
        "timeout": {
          "description": "timeout specifies the max amount of time any kubernetes client command can run.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1beta1UninstallReleaseResponse": {
      "description": "UninstallReleaseResponse represents a successful response to an uninstall request.",
      "properties": {
        "info": {
          "title": "Info is an uninstall message",
          "type": "string"
        },
        "release": {
          "$ref": "#/definitions/releaseRelease",
          "description": "Release is the release that was marked deleted."
        }
      },
      "type": "object"
    },
    "v1beta1UpdateReleaseRequest": {
      "description": "UpdateReleaseRequest updates a release.",
      "properties": {
        "chart": {
          "$ref": "#/definitions/chartChart",
          "description": "Chart is the protobuf representation of a chart."
        },
        "disable_hooks": {
          "description": "DisableHooks causes the server to skip running any hooks for the upgrade.",
          "format": "boolean",
          "type": "boolean"
        },
        "dry_run": {
          "format": "boolean",
          "title": "dry_run, if true, will run through the release logic, but neither create",
          "type": "boolean"
        },
        "force": {
          "description": "Force resource update through delete/recreate if needed.",
          "format": "boolean",
          "type": "boolean"
        },
        "name": {
          "title": "The name of the release",
          "type": "string"
        },
        "recreate": {
          "format": "boolean",
          "title": "Performs pods restart for resources if applicable",
          "type": "boolean"
        },
        "reset_values": {
          "description": "ResetValues will cause Tiller to ignore stored values, resetting to default values.",
          "format": "boolean",
          "type": "boolean"
        },
        "reuse_values": {
          "description": "ReuseValues will cause Tiller to reuse the values from the last release.\nThis is ignored if reset_values is set.",
          "format": "boolean",
          "type": "boolean"
        },
        "timeout": {
          "description": "timeout specifies the max amount of time any kubernetes client command can run.",
          "format": "int64",
          "type": "integer"
        },
        "values": {
          "$ref": "#/definitions/chartConfig",
          "description": "Values is a string containing (unparsed) YAML values."
        },
        "wait": {
          "format": "boolean",
          "title": "wait, if true, will wait until all Pods, PVCs, and Services are in a ready state\nbefore marking the release as successful. It will wait for as long as timeout",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1beta1UpdateReleaseResponse": {
      "description": "UpdateReleaseResponse is the response to an update request.",
      "properties": {
        "release": {
          "$ref": "#/definitions/releaseRelease"
        }
      },
      "type": "object"
    },
    "versionVersion": {
      "properties": {
        "git_commit": {
          "type": "string"
        },
        "git_tree_state": {
          "type": "string"
        },
        "sem_ver": {
          "title": "Sem ver string for the version",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "host": "api.appscode.com",
  "info": {
    "title": "tiller.proto",
    "version": "1beta1"
  },
  "paths": {
    "/_appscode/api/seed/v1beta1/apps/listreleases": {
      "get": {
        "operationId": "ListReleases",
        "parameters": [
          {
            "description": "Limit is the maximum number of releases to be returned.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset is the last release name that was seen. The next listing\noperation will start with the name after this one.\nExample: If list one returns albert, bernie, carl, and sets 'next: dennis'.\ndennis is the offset. Supplying 'dennis' for the next request should\ncause the next batch to return a set of results starting with 'dennis'.",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "string"
          },
          {
            "default": "UNKNOWN",
            "description": "SortBy is the sort field that the ListReleases server should sort data before returning.",
            "enum": [
              "UNKNOWN",
              "NAME",
              "LAST_RELEASED"
            ],
            "in": "query",
            "name": "sort_by",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter is a regular expression used to filter which releases should be listed.\n\nAnything that matches the regexp will be included in the results.",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "default": "ASC",
            "description": "SortOrder is the ordering directive used for sorting.",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sort_order",
            "required": false,
            "type": "string"
          },
          {
            "description": " - UNKNOWN: Status_UNKNOWN indicates that a release is in an uncertain state.\n - DEPLOYED: Status_DEPLOYED indicates that the release has been pushed to Kubernetes.\n - DELETED: Status_DELETED indicates that a release has been deleted from Kubermetes.\n - SUPERSEDED: Status_SUPERSEDED indicates that this release object is outdated and a newer one exists.\n - FAILED: Status_FAILED indicates that the release was not successfully deployed.\n - DELETING: Status_DELETING indicates that a delete operation is underway.",
            "in": "query",
            "items": {
              "enum": [
                "UNKNOWN",
                "DEPLOYED",
                "DELETED",
                "SUPERSEDED",
                "FAILED",
                "DELETING"
              ],
              "type": "string"
            },
            "name": "status_codes",
            "required": false,
            "type": "array"
          },
          {
            "description": "Namespace is the filter to select releases only from a specific namespace.",
            "in": "query",
            "name": "namespace",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/v1beta1ListReleasesResponse"
            }
          }
        },
        "summary": "ListReleases retrieves release history.\nTODO: Allow filtering the set of releases by\nrelease status. By default, ListAllReleases returns the releases who\ncurrent status is \"Active\".",
        "tags": [
          "ReleaseService"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0"
}