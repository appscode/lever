{
  "definitions": {
    "ListSortSortBy": {
      "default": "UNKNOWN",
      "description": "SortBy defines sort operations.",
      "enum": [
        "UNKNOWN",
        "NAME",
        "LAST_RELEASED"
      ],
      "type": "string"
    },
    "ListSortSortOrder": {
      "default": "ASC",
      "description": "SortOrder defines sort orders to augment sorting operations.",
      "enum": [
        "ASC",
        "DESC"
      ],
      "type": "string"
    },
    "StatusCode": {
      "default": "UNKNOWN",
      "description": " - UNKNOWN: Status_UNKNOWN indicates that a release is in an uncertain state.\n - DEPLOYED: Status_DEPLOYED indicates that the release has been pushed to Kubernetes.\n - DELETED: Status_DELETED indicates that a release has been deleted from Kubermetes.\n - SUPERSEDED: Status_SUPERSEDED indicates that this release object is outdated and a newer one exists.\n - FAILED: Status_FAILED indicates that the release was not successfully deployed.\n - DELETING: Status_DELETING indicates that a delete operation is underway.\n - PENDING_INSTALL: Status_PENDING_INSTALL indicates that an install operation is underway.\n - PENDING_UPGRADE: Status_PENDING_UPGRADE indicates that an upgrade operation is underway.\n - PENDING_ROLLBACK: Status_PENDING_ROLLBACK indicates that an rollback operation is underway.",
      "enum": [
        "UNKNOWN",
        "DEPLOYED",
        "DELETED",
        "SUPERSEDED",
        "FAILED",
        "DELETING",
        "PENDING_INSTALL",
        "PENDING_UPGRADE",
        "PENDING_ROLLBACK"
      ],
      "type": "string"
    },
    "chartChart": {
      "description": "Chart is a helm package that contains metadata, a default config, zero or more\n\toptionally parameterizable templates, and zero or more charts (dependencies).",
      "properties": {
        "dependencies": {
          "description": "Charts that this chart depends on.",
          "items": {
            "$ref": "#/definitions/chartChart"
          },
          "type": "array"
        },
        "files": {
          "description": "Miscellaneous files in a chart archive,\ne.g. README, LICENSE, etc.",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/chartMetadata",
          "description": "Contents of the Chartfile."
        },
        "templates": {
          "description": "Templates for this chart.",
          "items": {
            "$ref": "#/definitions/chartTemplate"
          },
          "type": "array"
        },
        "values": {
          "$ref": "#/definitions/chartConfig",
          "description": "Default config for this template."
        }
      },
      "type": "object"
    },
    "chartConfig": {
      "description": "Config supplies values to the parametrizable templates of a chart.",
      "properties": {
        "raw": {
          "type": "string"
        },
        "values": {
          "additionalProperties": {
            "$ref": "#/definitions/chartValue"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "chartMaintainer": {
      "description": "Maintainer describes a Chart maintainer.",
      "properties": {
        "email": {
          "title": "Email is an optional email address to contact the named maintainer",
          "type": "string"
        },
        "name": {
          "title": "Name is a user name or organization name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "chartMetadata": {
      "description": "Metadata for a Chart file. This models the structure of a Chart.yaml file.\n\n\tSpec: https://k8s.io/helm/blob/master/docs/design/chart_format.md#the-chart-file",
      "properties": {
        "apiVersion": {
          "description": "The API Version of this chart.",
          "type": "string"
        },
        "appVersion": {
          "description": "The version of the application enclosed inside of this chart.",
          "type": "string"
        },
        "condition": {
          "title": "The condition to check to enable chart",
          "type": "string"
        },
        "deprecated": {
          "title": "Whether or not this chart is deprecated",
          "type": "boolean"
        },
        "description": {
          "title": "A one-sentence description of the chart",
          "type": "string"
        },
        "engine": {
          "description": "The name of the template engine to use. Defaults to 'gotpl'.",
          "type": "string"
        },
        "home": {
          "title": "The URL to a relevant project page, git repo, or contact person",
          "type": "string"
        },
        "icon": {
          "description": "The URL to an icon file.",
          "type": "string"
        },
        "keywords": {
          "items": {
            "type": "string"
          },
          "title": "A list of string keywords",
          "type": "array"
        },
        "maintainers": {
          "items": {
            "$ref": "#/definitions/chartMaintainer"
          },
          "title": "A list of name and URL/email address combinations for the maintainer(s)",
          "type": "array"
        },
        "name": {
          "title": "The name of the chart",
          "type": "string"
        },
        "sources": {
          "items": {
            "type": "string"
          },
          "title": "Source is the URL to the source code of this chart",
          "type": "array"
        },
        "tags": {
          "title": "The tags to check to enable chart",
          "type": "string"
        },
        "tillerVersion": {
          "title": "TillerVersion is a SemVer constraints on what version of Tiller is required.\nSee SemVer ranges here: https://github.com/Masterminds/semver#basic-comparisons",
          "type": "string"
        },
        "version": {
          "title": "A SemVer 2 conformant version string of the chart",
          "type": "string"
        }
      },
      "type": "object"
    },
    "chartTemplate": {
      "description": "Template represents a template as a name/value pair.\n\nBy convention, name is a relative path within the scope of the chart's\nbase directory.",
      "properties": {
        "data": {
          "description": "Data is the template as byte data.",
          "type": "string"
        },
        "name": {
          "description": "Name is the path-like name of the template.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "chartValue": {
      "description": "Value describes a configuration value as a string.",
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "protobufAny": {
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
      "properties": {
        "type_url": {
          "description": "A URL/resource name whose content describes the type of the\nserialized protocol buffer message.\n\nFor URLs which use the scheme `http`, `https`, or no scheme, the\nfollowing restrictions and interpretations apply:\n\n* If no scheme is provided, `https` is assumed.\n* The last segment of the URL's path must represent the fully\n  qualified name of the type (as in `path/google.protobuf.Duration`).\n  The name should be in a canonical form (e.g., leading \".\" is\n  not accepted).\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
          "type": "string"
        },
        "value": {
          "description": "Must be a valid serialized protocol buffer of the above specified type.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v2GetHistoryRequest": {
      "description": "GetHistoryRequest requests a release's history.",
      "properties": {
        "max": {
          "description": "The maximum number of releases to include.",
          "type": "integer"
        },
        "name": {
          "description": "The name of the release.",
          "maxLength": 63,
          "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v2GetReleaseContentRequest": {
      "description": "GetReleaseContentRequest is a request to get the contents of a release.",
      "properties": {
        "format_raw": {
          "title": "Format release config and values to JSON string",
          "type": "boolean"
        },
        "name": {
          "maxLength": 63,
          "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
          "title": "The name of the release",
          "type": "string"
        },
        "version": {
          "title": "Version is the version of the release",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v2GetReleaseStatusRequest": {
      "description": "GetReleaseStatusRequest is a request to get the status of a release.",
      "properties": {
        "name": {
          "maxLength": 63,
          "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
          "title": "Name is the name of the release",
          "type": "string"
        },
        "version": {
          "title": "Version is the version of the release",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v2GetVersionRequest": {
      "description": "GetVersionRequest requests for version information.",
      "type": "object"
    },
    "v2InstallReleaseRequest": {
      "description": "InstallReleaseRequest is the request for an installation of a chart.",
      "properties": {
        "chart": {
          "$ref": "#/definitions/chartChart",
          "description": "Chart is the protobuf representation of a chart."
        },
        "chart_url": {
          "title": "url to download char tar file @appscode",
          "type": "string"
        },
        "disable_hooks": {
          "description": "DisableHooks causes the server to skip running any hooks for the install.",
          "type": "boolean"
        },
        "dry_run": {
          "description": "DryRun, if true, will run through the release logic, but neither create\na release object nor deploy to Kubernetes. The release object returned\nin the response will be fake.",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the candidate release name. This must be unique to the\nnamespace, otherwise the server will return an error. If it is not\nsupplied, the server will autogenerate one.",
          "maxLength": 63,
          "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
          "type": "string"
        },
        "namespace": {
          "description": "Namepace is the kubernetes namespace of the release.",
          "maxLength": 63,
          "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
          "type": "string"
        },
        "reuse_name": {
          "description": "ReuseName requests that Tiller re-uses a name, instead of erroring out.",
          "type": "boolean"
        },
        "timeout": {
          "description": "timeout specifies the max amount of time any kubernetes client command can run.",
          "type": "integer"
        },
        "values": {
          "$ref": "#/definitions/chartConfig",
          "description": "Values is a string containing (unparsed) YAML values."
        },
        "wait": {
          "title": "wait, if true, will wait until all Pods, PVCs, and Services are in a ready state\nbefore marking the release as successful. It will wait for as long as timeout",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v2ListReleasesRequest": {
      "description": "ListReleasesRequest requests a list of releases.\n\nReleases can be retrieved in chunks by setting limit and offset.\n\nReleases can be sorted according to a few pre-determined sort stategies.",
      "properties": {
        "filter": {
          "description": "Filter is a regular expression used to filter which releases should be listed.\n\nAnything that matches the regexp will be included in the results.",
          "type": "string"
        },
        "limit": {
          "description": "Limit is the maximum number of releases to be returned.",
          "type": "integer"
        },
        "namespace": {
          "description": "Namespace is the filter to select releases only from a specific namespace.",
          "maxLength": 63,
          "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
          "type": "string"
        },
        "offset": {
          "description": "Offset is the last release name that was seen. The next listing\noperation will start with the name after this one.\nExample: If list one returns albert, bernie, carl, and sets 'next: dennis'.\ndennis is the offset. Supplying 'dennis' for the next request should\ncause the next batch to return a set of results starting with 'dennis'.",
          "type": "string"
        },
        "sort_by": {
          "$ref": "#/definitions/ListSortSortBy",
          "description": "SortBy is the sort field that the ListReleases server should sort data before returning."
        },
        "sort_order": {
          "$ref": "#/definitions/ListSortSortOrder",
          "description": "SortOrder is the ordering directive used for sorting."
        },
        "status_codes": {
          "items": {
            "$ref": "#/definitions/StatusCode"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v2RollbackReleaseRequest": {
      "properties": {
        "disable_hooks": {
          "title": "DisableHooks causes the server to skip running any hooks for the rollback",
          "type": "boolean"
        },
        "dry_run": {
          "title": "dry_run, if true, will run through the release logic but no create",
          "type": "boolean"
        },
        "force": {
          "description": "Force resource update through delete/recreate if needed.",
          "type": "boolean"
        },
        "name": {
          "maxLength": 63,
          "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
          "title": "The name of the release",
          "type": "string"
        },
        "recreate": {
          "title": "Performs pods restart for resources if applicable",
          "type": "boolean"
        },
        "timeout": {
          "description": "timeout specifies the max amount of time any kubernetes client command can run.",
          "type": "integer"
        },
        "version": {
          "description": "Version is the version of the release to deploy.",
          "type": "integer"
        },
        "wait": {
          "title": "wait, if true, will wait until all Pods, PVCs, and Services are in a ready state\nbefore marking the release as successful. It will wait for as long as timeout",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v2UninstallReleaseRequest": {
      "description": "UninstallReleaseRequest represents a request to uninstall a named release.",
      "properties": {
        "disable_hooks": {
          "description": "DisableHooks causes the server to skip running any hooks for the uninstall.",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the name of the release to delete.",
          "maxLength": 63,
          "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
          "type": "string"
        },
        "purge": {
          "description": "Purge removes the release from the store and make its name free for later use.",
          "type": "boolean"
        },
        "timeout": {
          "description": "timeout specifies the max amount of time any kubernetes client command can run.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v2UpdateReleaseRequest": {
      "description": "UpdateReleaseRequest updates a release.",
      "properties": {
        "chart": {
          "$ref": "#/definitions/chartChart",
          "description": "Chart is the protobuf representation of a chart."
        },
        "chart_url": {
          "title": "url to download char tar file @appscode",
          "type": "string"
        },
        "disable_hooks": {
          "description": "DisableHooks causes the server to skip running any hooks for the upgrade.",
          "type": "boolean"
        },
        "dry_run": {
          "title": "dry_run, if true, will run through the release logic, but neither create",
          "type": "boolean"
        },
        "force": {
          "description": "Force resource update through delete/recreate if needed.",
          "type": "boolean"
        },
        "name": {
          "maxLength": 63,
          "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
          "title": "The name of the release",
          "type": "string"
        },
        "recreate": {
          "title": "Performs pods restart for resources if applicable",
          "type": "boolean"
        },
        "reset_values": {
          "description": "ResetValues will cause Tiller to ignore stored values, resetting to default values.",
          "type": "boolean"
        },
        "reuse_values": {
          "description": "ReuseValues will cause Tiller to reuse the values from the last release.\nThis is ignored if reset_values is set.",
          "type": "boolean"
        },
        "timeout": {
          "description": "timeout specifies the max amount of time any kubernetes client command can run.",
          "type": "integer"
        },
        "values": {
          "$ref": "#/definitions/chartConfig",
          "description": "Values is a string containing (unparsed) YAML values."
        },
        "wait": {
          "title": "wait, if true, will wait until all Pods, PVCs, and Services are in a ready state\nbefore marking the release as successful. It will wait for as long as timeout",
          "type": "boolean"
        }
      },
      "type": "object"
    }
  }
}